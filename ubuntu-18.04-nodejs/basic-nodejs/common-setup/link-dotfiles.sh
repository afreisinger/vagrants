#!/bin/bash
BASH_DIR="${HOME}/.bash.d"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

set -e #exit on error
pushd "$SCRIPT_DIR" > /dev/null #The pushd command saves the current working directory in memory so it can be returned to at any time
source "$SCRIPT_DIR/bash.d/colors" # Get some color codes for printing



unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     MACHINE=Linux;;
    Darwin*)    MACHINE=Mac;;
    CYGWIN*)    MACHINE=Cygwin;;
    MINGW*)     MACHINE=MinGw;;
    *)          MACHINE="UNKNOWN:${unameOut}"
esac
echo -e $(dark_yellow ".Creating symlinks for dotfiles to $HOME")


# Symlink all dotfiles on Mac
if [[ $MACHINE == "Mac" ]]; then
  for f in dotfiles/\.[^.]*; do
    FILE="$(basename $f)"
    ln -sf "$SCRIPT_DIR/dotfiles/$FILE" "$HOME/."
  done
fi

# .zshrc cannot be symlinked on WSL. ZSH will break if symlinked. Copy instead.
# This might change in WSL2
if [[ $MACHINE == "Linux" ]]; then
  #for f in dotfiles/\.[^.]*; do
   for f in dotfiles/*; do
    FILE="$(basename $f)"
    if [[ $FILE == ".zshrc" ]]; then
      echo ".zshrc cannot be symlinked. Copying instead."
      cp -p "$SCRIPT_DIR/dotfiles/.zshrc" "$HOME"
    else
      echo -e $(green ""..."$HOME"/.$FILE" -> $SCRIPT_DIR"/dotfiles/$FILE"")
      ln -sf "$SCRIPT_DIR/dotfiles/$FILE" "$HOME"/."$FILE"
    fi
  done
fi

# Source .zshrc to update env
# Ignore the errors generated by this source.
# They only appear during this process. They work properly on new shell startup.

echo -e $(dark_yellow "..Linked dotfiles. Please restart your shell.")